/*************************************************************************
 * Copyright 2023 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
/**
 * Internal APIs, meant to be used by Unified Shell only.
 * @packageDocumentation
 * @module ai
 */
import EventEmitter from './src/EventEmitter';
import type { JSX } from 'react';
export interface Prompt {
    icon: JSX.Element;
    label: string;
    name: string;
}
export interface Source {
    endIndex: number;
    startIndex: number;
    title?: string;
    url: string;
}
export interface SuccessResponse {
    answer: string;
    chatId: string;
    interactionId: string;
    prompts: Prompt[];
    date: Date | null;
    sources: Source[];
    promptSuggestions: string[];
    reportingDataDefinition?: any;
    usageInsights: string;
    visualizations: any[];
}
export interface SystemResponse {
    message: string;
}
export interface ErrorResponse {
    error: boolean;
    date: Date | null;
    message?: string;
    requestId?: string;
    status: number;
}
export type Response = SuccessResponse | SystemResponse | ErrorResponse;
export declare enum AIMessageType {
    CONTEXT = "CONTEXT",
    ERROR = "ERROR",
    OPEN = "OPEN",
    QUERY = "QUERY",
    RESPONSE = "RESPONSE"
}
export interface AIMessagePayload {
    context?: AIContext;
    /**
     * The query that was sent to the AI.
     */
    query?: string;
    /**
     * The response from the AI.
     */
    response?: Response;
    /**
     * The type of message.
     */
    type: AIMessageType;
}
export interface AIContext {
    /**
     * Catch all for now.
     */
    [key: string]: any;
}
interface AIMessageEvent {
    CONTEXT: AIMessagePayload;
    ERROR: AIMessagePayload;
    OPEN: AIMessagePayload;
    QUERY: AIMessagePayload;
    RESPONSE: AIMessagePayload;
}
export interface AIApi extends EventEmitter<AIMessageEvent> {
    /**
     * Sets the context for the AI chat. This can be called unlimited times to
     * ensure the context has the correct information. This value will be fetched
     * on every request for context by the AI chat UI when a user submits a query.
     * Please make sure to keep this value up-to-date when any context values
     * change within the application.
     *
     * ***Example:***
     *
     * ```typescript
     * ai.context = {...};
     * ```
     */
    context?: AIContext;
    /**
     * Requests the context from the application. This is used to asynchronously
     * request the context on-demand.
     *
     * ***Example:***
     *
     * ```typescript
     * ai.onContextRequest(async () => ({...}));
     * ```
     */
    onContextRequest: (callback: () => Promise<AIContext>) => void;
    /**
     * Opens the chat side rail with an optional pre-populated query.
     *
     * ***Example:***
     *
     * ```typescript
     * ai.openChat('How do I create a new project?');
     * ```
     */
    openChat: (query?: string) => void;
    /**
     * Send a message to the AI chat.
     *
     * ***Example:***
     *
     * ```typescript
     * ai.sendMessage({type: AIMessageType.ACTION_COMPLETE});
     * ```
     */
    sendMessage: (payload: AIMessagePayload) => void;
}
declare const ai: AIApi;
export default ai;
