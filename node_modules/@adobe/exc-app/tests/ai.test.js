"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*************************************************************************
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
const ai_1 = __importStar(require("../ai"));
const Global_1 = __importDefault(require("../src/Global"));
describe('ai.ts', () => {
    const evt = {};
    const handler = () => { };
    const aiMock = {
        context: {},
        emit: (type, evt) => {
            return { evt, type };
        },
        off: (type, handler) => {
            return { handler, type };
        },
        on: (type, handler) => {
            return { handler, type };
        },
        onContextRequest: (callback) => {
            return callback();
        },
        openChat: (query) => {
            return query;
        },
        sendMessage: (payload) => {
            return payload;
        }
    };
    beforeEach(() => {
        Global_1.default['exc-module-runtime'] = {
            ai: () => {
                return aiMock;
            }
        };
    });
    it('can emit()', () => {
        const spy = jest.spyOn(aiMock, 'emit');
        // action
        ai_1.default.emit(ai_1.AIMessageType.RESPONSE, evt),
            // verify
            expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('RESPONSE', evt);
    });
    it('can off()', () => {
        const spy = jest.spyOn(aiMock, 'off');
        // action
        ai_1.default.off('RESPONSE', handler),
            // verify
            expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('RESPONSE', handler);
    });
    it('can on()', () => {
        const spy = jest.spyOn(aiMock, 'on');
        // action
        ai_1.default.on('RESPONSE', handler);
        // verify
        expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('RESPONSE', handler);
    });
    it('can onContextRequest()', () => {
        const spy = jest.spyOn(aiMock, 'onContextRequest');
        // action
        ai_1.default.onContextRequest(() => Promise.resolve({}));
        // verify
        expect(spy).toBeCalledTimes(1);
    });
    it('can openChat()', () => {
        const spy = jest.spyOn(aiMock, 'openChat');
        // action
        ai_1.default.openChat('How do I create a new project?');
        // verify
        expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith('How do I create a new project?');
    });
    it('can sendMessage()', () => {
        const spy = jest.spyOn(aiMock, 'sendMessage');
        const message = {
            context: aiMock.context,
            type: ai_1.AIMessageType.CONTEXT
        };
        // action
        ai_1.default.sendMessage(message);
        // verify
        expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith(message);
    });
});
//# sourceMappingURL=ai.test.js.map