{"mappings":"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","sources":["web-src/integration.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\n  const propertiesButton = document.getElementById(\n    'environment-properties-button'\n  );\n  const integrationGuideButton = document.getElementById(\n    'integration-guide-button'\n  );\n  const assetSelectorPreviewButton = document.getElementById(\n    'asset-selector-preview-button'\n  );\n  const integrationPropertiesGuideDialog = document.getElementById(\n    'integration-properties-guide-dialog'\n  );\n  const assetSelectorPreviewedImage = document.getElementById(\n    'asset-selector-preview-image'\n  );\n\n  const destinationSelectorOpenButton = document.getElementById(\n    'destination-selector-open-button'\n  );\n\n  const destinationSelectorSaveButton = document.getElementById(\n    'destination-selector-save-button'\n  );\n\n  propertiesButton.addEventListener('click', function () {\n    openEnvironmentPropertiesDialog();\n  });\n\n  integrationGuideButton.addEventListener('click', function () {\n    openIntegrationGuideDialog();\n  });\n\n  assetSelectorPreviewButton.addEventListener(\n    'click',\n    openAssetSelectorPreviewDialog\n  );\n\n  assetSelectorPreviewedImage.addEventListener(\n    'click',\n    openAssetSelectorPreviewDialog\n  );\n\n  destinationSelectorOpenButton.addEventListener(\n    'click',\n    openDestinationSelectorDialog\n  );\n\n  destinationSelectorSaveButton.addEventListener(\n    'click',\n    openDestinationSelectorDialog\n  );\n\n  // re-register AssetsSelectors Auth Service\n  window.addEventListener('environmentProperties', (args) => {\n    registerAssetsSelectorsAuthService(args.detail, true);\n  });\n\n  window.addEventListener('onAssetsSelectedEvent', onAssetsSelected);\n\n  window.addEventListener('onDestinationSelectedEvent', onDestinationSelected);\n\n  registerAssetsSelectorsAuthService();\n\n  // must be registered on page load before the asset selector is rendered\n  function registerAssetsSelectorsAuthService(\n    props = {},\n    changeEnvironment = false\n  ) {\n    const prodImsClientId = 'aemcs-spark-assetselector';\n    const prodImsOrg = '523BF0605768FF0E7F000101@AdobeOrg';\n\n    const initImsAuthInfo = {\n      env: 'prod',\n      imsClientId: prodImsClientId,\n      imsScope:\n        'AdobeID,openid,read_organizations,additional_info.projectedProductContext',\n      redirectUrl: window.location.href,\n      imsOrg: prodImsOrg,\n      imsAuthService: undefined,\n      ...props,\n    };\n\n    if (PureJSSelectors) {\n      // rename to registerAssetsSelectorsAuthService(...)\n      return PureJSSelectors.registerAssetsSelectorsAuthService(\n        initImsAuthInfo,\n        changeEnvironment\n      );\n    }\n  }\n\n  async function onAssetsSelected({ detail }) {\n    const asset = detail[0];\n\n    const assetSelectorSelectedItemWell = document.getElementById(\n      'asset-selector-selected-item-well'\n    );\n    assetSelectorSelectedItemWell.style.display = 'block';\n\n    const assetSelectorSelectedItemPre = document.getElementById(\n      'asset-selector-selected-item-pre'\n    );\n\n    assetSelectorSelectedItemPre.innerText = JSON.stringify(asset, null, 2);\n\n    const previewImage = await generatePreviewImage(detail);\n    showPreviewImage(previewImage);\n  }\n\n  function onDestinationSelected({ detail }) {\n    const destinationPath = detail['repo:path'];\n\n    const input = document.getElementById(\n      'destination-selector-selected-item-input'\n    );\n\n    input.value = destinationPath;\n\n    integrationPropertiesGuideDialog.close();\n  }\n\n  async function fetchDialogContent(dialog, url) {\n    try {\n      // easy way to dynamically append dialog content instead of creating multiple dialogs manually\n      const response = await fetch(url);\n      const content = await response.text();\n\n      // Clear the dialog content and append the new content\n      while (dialog.firstChild) {\n        dialog.removeChild(dialog.firstChild);\n      }\n\n      const template = document.createElement('template');\n      template.innerHTML = content;\n\n      // Extract script tags from the content\n      const scriptTags = Array.from(\n        template.content.querySelectorAll('script')\n      );\n\n      scriptTags.forEach((script) => {\n        script.remove();\n      });\n\n      dialog.appendChild(document.importNode(template.content, true));\n\n      // Create and append new script elements for each extracted script tag\n      const addedScripts = [];\n      scriptTags.forEach((script) => {\n        const newScript = document.createElement('script');\n        if (script.src) {\n          newScript.src = script.src;\n        } else {\n          newScript.textContent = script.textContent;\n        }\n        dialog.appendChild(newScript);\n        addedScripts.push(newScript);\n      });\n\n      // Clear the content ans scripts when the dialog is closed\n      const onDialogClose = () => {\n        while (dialog.firstChild) {\n          dialog.removeChild(dialog.firstChild);\n        }\n        dialog.removeEventListener('close', onDialogClose);\n      };\n\n      dialog.addEventListener('close', onDialogClose);\n      dialog.showModal();\n    } catch (error) {\n      console.error('Error fetching dialog content:', error);\n    }\n  }\n\n  async function openEnvironmentPropertiesDialog() {\n    await fetchDialogContent(\n      integrationPropertiesGuideDialog,\n      'environment.html'\n    );\n  }\n\n  async function openIntegrationGuideDialog() {\n    await fetchDialogContent(integrationPropertiesGuideDialog, 'guide.html');\n  }\n\n  async function openAssetSelectorPreviewDialog() {\n    await fetchDialogContent(\n      integrationPropertiesGuideDialog,\n      './asset-selector-integration/asset-selector-wrapper.html'\n    );\n  }\n\n  async function openDestinationSelectorDialog() {\n    console.log('openDestinationSelectorDialog');\n    await fetchDialogContent(\n      integrationPropertiesGuideDialog,\n      './destination-selector-integration/destination-selector-wrapper.html'\n    );\n  }\n\n  // get preview image blob\n  const generatePreviewImage = async (assets) => {\n    const renditionLinks = getAssetRenditionLinks(assets);\n    const optimalRenditionLink = getOptimalRenditionLink(renditionLinks);\n    return await getRenditionBlob(optimalRenditionLink?.href);\n  };\n\n  const getAssetRenditionLinks = (selectedAssets) => {\n    const asset = selectedAssets?.[0];\n    return asset?._links?.['http://ns.adobe.com/adobecloud/rel/rendition'];\n  };\n\n  // Very basic way to get the optimal rendition link based on the height x width\n  const getOptimalRenditionLink = (renditions) => {\n    return renditions.reduce((optimalRendition, currentRendition) => {\n      const optimalResolution =\n        optimalRendition.width * optimalRendition.height;\n      const currentResolution =\n        currentRendition.width * currentRendition.height;\n      return currentResolution > optimalResolution\n        ? currentRendition\n        : optimalRendition;\n    });\n  };\n\n  // fetch the asset rendition and return the blob url\n  const getRenditionBlob = async (renditionUrl) => {\n    const response = await doFetch(renditionUrl);\n    const buffer = await response.arrayBuffer();\n    return URL.createObjectURL(new Blob([new Uint8Array(buffer)]));\n  };\n\n  // fetch rendition\n  const doFetch = (url, token = null, method = 'GET') => {\n    const header = new Headers();\n    if (!token) {\n      // get the bearer token either from window/wherever you are storing it from registerAssetsSelectorsAuthService\n      header.append(\n        'Authorization',\n        `Bearer ${window['assetsSelectorsAuthService'].imsToken}`\n      );\n    }\n    const requestOptions = {\n      method: method,\n      headers: header,\n    };\n    return fetch(url, requestOptions);\n  };\n\n  function removeAllChildren(element) {\n    while (element.firstChild.tagName !== 'IMG') {\n      element.removeChild(element.firstChild);\n    }\n  }\n\n  // insert preview image to the dom\n  function showPreviewImage(src) {\n    const imageElementId = 'asset-selector-preview-image-rendered';\n    const divElement = document.getElementById('asset-selector-preview-image');\n    const imageElement = document.getElementById(imageElementId);\n\n    if (divElement) {\n      divElement.style.margin = '0';\n      const img = imageElement || document.createElement('img');\n      const loadedImage = new Image();\n      img.id = imageElementId;\n      img.className = 'spectrum-Image-img_fdc794';\n      img.alt = 'Asset Selector preview image';\n      divElement.appendChild(img);\n      // remove all children except the image\n      removeAllChildren(divElement);\n      // load the image\n      loadedImage.onload = () => {\n        img.src = loadedImage.src;\n      };\n      loadedImage.src = src;\n    }\n  }\n});\n"],"names":[],"version":3,"file":"integration.f50b38da.js.map","sourceRoot":"../../../"}